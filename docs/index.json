[
{
	"uri": "https://nits0174.github.io/000058-SessionManager/1-introduce/",
	"title": "Giới Thiệu",
	"tags": [],
	"description": "",
	"content": "Tổng Quan Workshop này hướng dẫn cách xây dựng hệ thống kiểm thử hiệu năng tự động tích hợp vào quy trình CI/CD, sử dụng các dịch vụ AWS và công cụ mã nguồn mở. Bạn sẽ học cách thực hiện kiểm thử tải bằng công cụ k6, tự động phân tích kết quả, tích hợp giám sát hiệu năng với AWS CloudWatch, thiết lập hệ thống cảnh báo khi có bất thường và tạo báo cáo hiệu năng tự động.\nCI/CD CI - Continuous Integration là một phương pháp phát triển phần mềm mà trong đó các nhà phát triển thường xuyên commit và push các thay đổi lên các shared repository. Bằng cách nạp và hợp nhất các thay đổi từ nhiều nhà phát triển khác nhau, vì vậy giảm thiểu nguy cơ xung đột. Trước mỗi lần commit, các nhà phát triển có thể chạy các unit test trên mã nguồn như một kiểm tra bổ sung trước khi tích hợp. Một continuous integration tự động build và chạy các bài kiểm tra trên các mã nguồn thay đổi để phát hiện bất kỳ lỗi nào ngay lập tức.\nCD - Continuous Delivery là một phương pháp phát triển phần mềm mở rộng Continuous Integration trong đó mã nguồn được tự động chuẩn bị để triển khai cho một production instance. Sau khi build, build artifact với các thay đổi mới được triển khai cho một staging instance nơi chạy các bài kiểm tra nâng cao (integration, acceptance, load, end-to-end, etc.). Nếu cần, build artifact tự động được triển khai tới production instance sau khi được duyệt thủ công\nContinuous Delivery là một phương pháp phát triển phần mềm mở rộng Continuous Delivery trong đó các thay đổi mã nguồn được triển khai tự động đến một production instance. Sự khác biệt giữa Continuous Delivery và Continuous Deployment ở bước kiểm duyệt thủ công. Với Continuous Delivery, việc triển khai diễn ra tự động sau khi kiểm duyệt thủ công. Với Continuous Delivery, việc triển khai diễn ra tự động mà không cần phê duyệt thủ công.\nPerformance Testing Performance Testing là kỹ thuật kiểm thử nhằm xác định băng thông, khả năng xử lý, khả năng mở rộng hay nói chung là hiệu năng của hệ thống dưới khối lượng truy cập, khối được công việc xác định. Kết quả của kiểm thử hiệu năng phục vụ việc điều tra, đo lường, đánh giá hiệu năng thực của hệ thống.\nk6 k6 tên đầy đủ là Grafana k6, là một công cụ hỗ trợ load testing được phát triển bởi Grafana Labs và cộng đồng, nó là dự án mã nguồn mở và có thể mở rộng. k6 hỗ trợ tốt cho mô hình CI/CD, dễ dàng tích hợp vào các CI/CD tools như Jenkins, Azure Pipelines.\nk6 được phát triển bằng Go tuy nhiên test script được viết bằng JavaScript ES6, điều này giúp chúng ta dễ dàng tiếp cận và sử dụng. k6 cũng phát triển dịch vụ k6 Cloud mạnh mẽ, với nhiều tính năng đặc biệt như tạo test script với giao diện thân thiện, chạy test với số lượng lớn cùng nhiều tính năng khác.\nKiến Trúc Workshop k6 cho kiểm thử tải, xác thực hiệu năng và gửi metrics đến CloudWatch. AWS CodePipeline Tự động hóa pipeline CI/CD. AWS CodeBuild Chạy job kiểm thử k6 trong pipeline. Amazon S3 Lưu trữ test script và báo cáo kết quả kiểm thử CloudWatch Metrics – Thu thập metrics về hiệu năng từ k6 và ứng dụng. Logs – Lưu log kết quả test và log hệ thống. Alarms – Gửi cảnh báo khi hiệu năng vượt ngưỡng. Logs Insights – Phân tích sâu log kiểm thử để tìm vấn đề. Dashboard – Tổng hợp metrics \u0026amp; logs trên một giao diện trực quan. Qua workshop này, bạn sẽ:\nXây dựng quy trình CI/CD với kiểm thử hiệu năng tích hợp Sử dụng k6 kiểm tra khả năng chịu tải và độ ổn định của hệ thống. Phân tích kết quả kiểm thử tự động thông qua CloudWatch Metrics, Logs và Logs Insights. Tích hợp giám sát hiệu năng với AWS CloudWatch, bao gồm thu thập metrics, logs, và hiển thị trên dashboard. Quản lý đường cơ sở (baseline) hiệu năng, so sánh kết quả các lần kiểm thử để phát hiện hiệu năng suy giảm (performance regression). Thiết lập hệ thống cảnh báo bằng CloudWatch Alarms để nhận thông báo khi hiệu năng vượt ngưỡng. Tự động hóa báo cáo hiệu năng, tổng hợp thông tin từ logs và metrics. "
},
{
	"uri": "https://nits0174.github.io/000058-SessionManager/3-cicd/3.1-git/",
	"title": "Tạo kho Git",
	"tags": [],
	"description": "",
	"content": " Mở bảng điều khiển Gitlab của bạn. Nhấp vào Projects trên menu bên trái. Chọn tùy chọn Create a project. Tại trang Create new project, chọn tùy chọn Create blank project. Tại trang Create blank project. Nhập fcj-book-store-backend tại Project name. Bỏ chọn Initialize repository with a README. Nhấp vào nút Create project. Cấu hình khóa SSH để giao tiếp với Gitlab.\nLàm theo tài liệu trong Notes để hoàn thành bước này. Tạo cặp khóa SSH. Cấu hình SSH để trỏ đến thư mục khác. Sử dụng khóa SSH để giao tiếp với GitLab.\nTải mã nguồn lên dự án fcj-book-store-backend trên Gitlab.\nMở terminal của bạn và đi đến thư mục gốc của dự án fcj-book-store-sam-ws7 mà bạn đã tải xuống trước đó. Chạy mã dưới đây. git init git remote add origin git@gitlab.com:fcj-ws/fcj-book-store-backend.git git add . git commit -m \u0026#34;Init project\u0026#34; git push --set-upstream origin master Quay lại dự án fcj-book-store-backend trên Gitlab. Bạn có thể thấy mã đã được tải lên.\n"
},
{
	"uri": "https://nits0174.github.io/000058-SessionManager/4-cloudwatch/4.1-cloudformation/",
	"title": "Triển khai CloudFormation Stack",
	"tags": [],
	"description": "",
	"content": "Tổng quan ℹ️ Information: Trong phần này, chúng ta sẽ thiết lập môi trường lab bằng cách triển khai một AWS CloudFormation Stack. Việc sử dụng CloudFormation giúp triển khai nhanh chóng và đồng bộ tất cả các tài nguyên AWS cần thiết cho workshop.\nℹ️ Information: Thông qua việc triển khai Stack, chúng ta đảm bảo mọi thành phần phục vụ Performance Automation Testing được cấu hình sẵn sàng, thống nhất và dễ dàng tái sử dụng. Điều này giúp giảm thiểu thời gian cài đặt thủ công, tránh sai sót cấu hình, đồng thời tối ưu hóa quy trình thử nghiệm hiệu năng trong pipeline CI/CD.\nTriển khai CloudFormation Stack Truy cập vào AWS Management Console Tìm kiếm dịch vụ CloudFormation trong thanh tìm kiếm Chọn CloudFormation từ kết quả tìm kiếm Trong giao diện CloudFormation Chọn Create stack Chọn With new resources (standard) Trong giao diện Create stack Trong phần Prerequisite - Prepare template, chọn Choose an existing template Tiếp theo chọn Sync from Git Ấn Next Cấu hình thông tin Stack\nStack name: Nhập FCJ-CloudWatch-Workshop (hoặc một tên dễ nhớ khác).\nChọn Link a Git repository.\nChọn GitLab.\nỞ phần Connection chọn fcjBookStoreGitLabConnection (Đã liên kết ở Codepipeline ) Role Name: Nhập FCJ-CloudWatch-Workshop.\nỞ phần Template file path điền template.yml.\nẤn Next Cấu hình tùy chọn Stack\n⚠️ Warning: Đảm bảo bạn đã tích vào ô xác nhận IAM resources để CloudFormation có thể tạo các tài nguyên IAM cần thiết.\nKhông cần thay đổi cấu hình mặc định trên trang này Cuộn xuống dưới cùng Tích chọn I acknowledge that CloudFormation might create IAM resources with custom namesAWS Ấn Next Xem lại và tạo Stack Kiểm tra lại tất cả thông tin cấu hình Cuộn xuống dưới cùng và ấn Submit để bắt đầu tạo Stack Theo dõi quá trình triển khai ℹ️ Information: Quá trình triển khai Stack có thể mất khoảng 5 phút để hoàn tất. Trong thời gian này, CloudFormation sẽ tự động tạo tất cả tài nguyên cần thiết cho workshop. Xác nhận triển khai thành công 🔒 Security Note: Sau khi triển khai thành công, hãy kiểm tra tab Outputs của Stack để lấy thông tin về các tài nguyên đã được tạo, bao gồm các URL và thông tin truy cập cần thiết cho các bước tiếp theo.\n💡 Pro Tip: Khi Stack hiển thị trạng thái CREATE_COMPLETE với màu xanh lá, điều này xác nhận rằng tất cả tài nguyên đã được triển khai thành công và bạn đã sẵn sàng để tiếp tục với các bài thực hành Amazon CloudWatch.\n"
},
{
	"uri": "https://nits0174.github.io/000058-SessionManager/",
	"title": "Tự Động Hóa Kiểm Thử Hiệu Năng trong CI/CD",
	"tags": [],
	"description": "",
	"content": "Tự Động Hóa Kiểm Thử Hiệu Năng trong CI/CD Nội Dung Giới thiệu Chuẩn bị Xây dựng pipeline Tích hợp CloudWatch Dọn dẹp tài nguyên "
},
{
	"uri": "https://nits0174.github.io/000058-SessionManager/2-prerequiste/",
	"title": "Chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Triển khai trên Local Trước khi chúng ta đi vào nội dung chính của workshop này, chúng ta cần phải cài đặt ứng dụng web. Tải xuống mã nguồn dưới đây.\nClone bằng HTTPS: git clone https://gitlab.com/fcj-group/fcj-book-store-backend.git\nClone bằng HTTPS: git clone git@gitlab.com:fcj-group/fcj-book-store-backend.git\nCài đặt K6 Với Windows, chạy command với Windows Package Manager: winget install k6\nHoặc nếu không muốn chạy command bạn có thể tải file .msi tại đây.\nVới hệ điều hành MacOS, Linux, Ubuntu, mời bạn tham khảo cách cài đặt cụ thể tại đây.\nĐể kiểm tra thành công hay chưa hãy chạy command: k6 version\nKiểm tra Chạy lệnh k6 với Terminal trên Visual Studio Code: k6 run path/to/your/fike-k6.js\nKết quả\nTài liệu tham khảo: https://k6.io/\n"
},
{
	"uri": "https://nits0174.github.io/000058-SessionManager/3-cicd/3.2-sam-pipeline/",
	"title": "Tạo SAM pipeline",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị Trong bước này, chúng ta sẽ tạo các vai trò IAM cho CodePipeline - Giai đoạn triển khai và CodeBuild.\nCảnh báo Vai trò được cấu hình với bảo mật tối thiểu, chỉ phù hợp cho môi trường workshop.\nTạo vai trò CodePipeline - Giai đoạn triển khai.\nMở AWS IAM console, sau đó nhấp vào Roles trên menu bên trái.\nNhấp vào nút Create role. Tại trang Step 1: Select trusted entity.\nChọn AWS service tại Trusted entity type. Nhập CloudFormation tại Service or use case và chọn CloudFormation tại Use case. Sau đó nhấp vào nút Next. Tại trang Step 2: Add permissions.\nNhập AdministratorAccess tại hộp Search. Chọn chính sách AdministratorAccess Sau đó nhấp vào nút Next. Tại trang Step 3: Name, review, and create.\nNhập fcjCodePipelineDeployStageRole tại Role name. Cuộn xuống và nhấp vào nút Create role. Tạo vai trò CodeBuild.\nMở AWS IAM console, sau đó nhấp vào Roles trên menu bên trái.\nNhấp vào nút Create role. Tại trang Step 1: Select trusted entity.\nChọn AWS service tại Trusted entity type. Nhập CodeBuild tại Service or use case và chọn CodeBuild tại Use case. Sau đó nhấp vào nút Next. Tại trang Step 2: Add permissions.\nNhập AdministratorAccess tại hộp Search. Chọn chính sách AdministratorAccess Sau đó nhấp vào nút Next. Tại trang Step 3: Name, review, and create.\nNhập fcjCodeBuildRole tại Role name. Cuộn xuống và nhấp vào nút Create role. Tạo pipeline Mở AWS CodePipeline console.\nNhấp vào Pipelines trên menu bên trái. Nhấp vào nút Create pipeline. Tại trang Step 1: Choose creation option.\nChọn Build custom pipeline tại Creation options. Sau đó nhấp vào nút Next. Tại trang Step 2: Choose pipeline settings.\nNhập fcjBookStorePipeline tại Pipeline name. Chọn Queued tại Execution mode. Chọn New service role tại Service role. Nhập AWSCodePipelineServiceRole-us-east-1-fcjBookStorePipeline tại Role name. Sau đó nhấp vào nút Next. Tại trang Step 3: Add source stage.\nChọn Gitlab tại Source provider.\nNhấp vào nút Connect to Gitlab. Tại trang Create a connection ở tab trình duyệt mới vừa mở.\nNhập fcjBookStoreGitlabConnection tại Connection name.\nNhấp vào nút Connect to Gitlab. Sau khi đăng nhập thành công vào Gitlab, nhấp vào nút Connect. Kiểm tra xem kết nối Gitlab có thành công không.\nNhập fcj-ws/fcj-book-store-backend tại Repository name.\nNhập master tại Default branch. Cuộn xuống cuối trang và nhấp vào nút Next. Tại trang Step 4: Add build stage.\nChọn Other build providers tại Build provider.\nChọn AWS CodeBuild.\nNhấp vào nút Create project. Tại trang Create build project ở tab trình duyệt mới vừa mở.\nNhập fcjBookStoreBuildProject tại Project name. Cuộn xuống, chọn Ubuntu tại Operating system.\nChọn Existing service role tại Service role.\nChọn fcjCodeBuildRole tại Role ARN. Cuộn xuống cuối trang, chọn Use a buildspec file tại Build specifications.\nNhấp vào nút Continue to CodePipeline. Chọn fcjBookStoreBuildProject tại Project name.\nĐể mặc định và nhấp vào nút Next. Tại trang Step 5: Add test stage.\nNhấp vào nút Skip test stage. Tại trang Step 6: Add deploy stage.\nChọn AWS CloudFormation tại Deploy provider.\nChọn BuildArtifact tại Input artifacts.\nChọn Create or update a stack tại Action mode.\nNhập fcj-book-store tại Stack name. Cuộn xuống, chọn BuildArtifact tại Artifact name.\nNhập packaged.yaml tại File name.\nChọn CAPABILITY_IAM, CAPABILITY_NAMED_IAM và CAPABILITY_AUTO_EXPAND tại Capabilities - optional.\nChọn fcjCodePipelineDeployStageRole tại Role name.\nNhấp vào nút Next. Tại trang Step 7: Review.\nCuộn xuống và nhấp vào nút Create pipeline. Kiểm tra pipeline Mở AWS CodePipeline console.\nNhấp vào Pipelines trên menu bên trái. Chọn pipeline fcjBookStorePipeline. Tại trang fcjBookStorePipeline.\nNhấp vào khung CodeBuild. Kết quả\nCodePipeline + Codebuild đã tự động chạy kiểm thử tải K6 từ file buildspec.yml trên GitLab "
},
{
	"uri": "https://nits0174.github.io/000058-SessionManager/4-cloudwatch/4.2-metric/",
	"title": "Thu Thập &amp; Phân Tích CloudWatch Metric",
	"tags": [],
	"description": "",
	"content": "CloudWatch Metric ℹ️ Information: Trong bối cảnh Performance Automation Testing, Metrics trong Amazon CloudWatch đóng vai trò như “bộ cảm biến” cho toàn bộ hệ thống. Chúng cung cấp dữ liệu định lượng về hiệu suất của ứng dụng, hạ tầng và quy trình kiểm thử.\n💡 Pro Tip: Metrics là nền tảng để xây dựng hệ thống giám sát hiệu năng tự động, hỗ trợ thiết lập baseline, phát hiện regression, kích hoạt cảnh báo và đề xuất tối ưu hóa.\n🔒 Security Note: Giám sát hiệu năng không chỉ phục vụ tối ưu hóa tốc độ và tài nguyên, mà còn giúp phát hiện sớm các hành vi bất thường có thể liên quan đến sự cố bảo mật hoặc tấn công DDoS.\nXem các Metrics ℹ️ Information: Trong phần này, chúng ta sẽ thực hành cách xem và phân tích các metrics trong Amazon CloudWatch, giúp bạn hiểu rõ hơn về hiệu suất của các tài nguyên AWS.\nTruy cập AWS Management Console Tìm kiếm dịch vụ CloudWatch trong thanh tìm kiếm Chọn CloudWatch từ kết quả tìm kiếm Trong giao diện CloudWatch Mở rộng phần Metrics ở menu bên trái Chọn All metrics Trong giao diện biểu đồ metrics, nhập từ khóa vào ô tìm kiếm Từ kết quả tìm kiếm, chọn kết quả mong muốn 💡 Pro Tip: Khi sử dụng thanh tìm kiếm, CloudWatch mặc định sẽ tìm theo Metric name, giúp bạn nhanh chóng lọc ra các metrics cụ thể cần theo dõi.\nTick chọn các nhiều metric để so sánh, quan sát biểu đồ và ghi nhận: Thời điểm CPU tăng đột biến. Thời điểm NetworkOut cao nhất (giai đoạn gửi nhiều request). Thời gian xử lý request (metric từ k6). ⚠️ Warning: Khi hiển thị nhiều metrics có đơn vị đo khác nhau trên cùng một biểu đồ, việc phân tích có thể trở nên khó khăn. Trong phần tiếp theo, chúng ta sẽ tìm hiểu cách tùy chỉnh biểu đồ để có cái nhìn trực quan hơn.\n"
},
{
	"uri": "https://nits0174.github.io/000058-SessionManager/3-cicd/",
	"title": "Xây dựng pipeline SAM",
	"tags": [],
	"description": "",
	"content": "Trong chương này, ta sẽ xây dựng tự động hóa các lệnh build, package và deploy bằng cách tạo một pipeline phân phối liên tục sử dụng AWS Code Pipeline. Chúng ta sẽ sử dụng SAM Pipelines để tạo và cập nhật tự động một pipeline CI/CD đa giai đoạn.\nAWS SAM Pipelines SAM Pipelines hoạt động bằng cách tạo một tập hợp các tệp cấu hình và hạ tầng mà bạn sử dụng để tạo và quản lý pipeline CI/CD của mình.\nSAM Pipelines có thể bootstrap các pipeline CI/CD cho các nhà cung cấp sau:\nJenkins GitLab CI/CD GitHub Actions Bitbucket Pipelines AWS CodePipeline SAM Pipelines tạo các tệp cấu hình phù hợp cho nhà cung cấp CI/CD mà bạn chọn. Ví dụ, khi sử dụng Gitlab CI/CD, SAM sẽ tổng hợp một tệp .gitlab-ci.yml. Tệp này định nghĩa pipeline CI/CD của bạn sử dụng Gitlab CI/CD. Trong workshop này, chúng ta sẽ sử dụng AWS CodePipeline. Như bạn sẽ thấy sớm, SAM tạo nhiều tệp, một trong số đó là một mẫu CloudFormation có tên codepipeline.yaml. Mẫu này định nghĩa nhiều tài nguyên AWS làm việc cùng nhau để tự động triển khai ứng dụng serverless của chúng ta.\nNội dung Tạo kho Git Tạo pipeline SAM "
},
{
	"uri": "https://nits0174.github.io/000058-SessionManager/4-cloudwatch/4.3-logs/",
	"title": "CloudWatch Logs",
	"tags": [],
	"description": "",
	"content": "Tổng quan ℹ️ Information: Amazon CloudWatch Logs cho phép bạn thu thập, lưu trữ và phân tích log từ ứng dụng, dịch vụ AWS hoặc công cụ kiểm thử như k6.Trong quy trình Performance Automation Testing, CloudWatch Logs giúp:\nLưu trữ kết quả test từ k6 để phân tích. Tìm kiếm lỗi hoặc cảnh báo xuất hiện khi hệ thống chịu tải. Tạo metric từ log để giám sát tự động trong CI/CD pipeline. 💡 Pro Tip: Việc phân tích logs hiệu quả không chỉ giúp khắc phục sự cố nhanh chóng mà còn hỗ trợ tối ưu hóa hiệu suất và phát hiện các mẫu hành vi bất thường trong hệ thống của bạn.\n🔒 Security Note: CloudWatch Logs cũng đóng vai trò quan trọng trong việc tuân thủ các yêu cầu về bảo mật và kiểm toán, cho phép bạn lưu trữ logs an toàn và truy xuất chúng khi cần thiết.\nCloudWatch Logs Trong trang chính của CloudWatch. Phần menu bên trái, mở rộng mục Logs Chọn Log groups Chọn /aws/codebuild/fcjBookStorBuildProject 💡 Pro Tip: Sử dụng thanh tìm kiếm giúp bạn nhanh chóng tìm thấy các log groups cụ thể trong môi trường có nhiều tài nguyên, tiết kiệm thời gian phân tích.\nChọn một instance bất kỳ để xem chi tiết logs Trong giao diện logs, bạn có thể thấy các bản ghi từ instance này được tạo ra từ nhiều nguồn khác nhau như: dhclient, NET, ec2net, systemd… ℹ️ Information: Các logs này cung cấp thông tin chi tiết về hoạt động của hệ thống, giúp bạn theo dõi các sự kiện, phát hiện lỗi và hiểu rõ hơn về cách hệ thống đang hoạt động.\nCloudWatch Metric Filter Quay lại màn hình chính của CloudWatch Chọn Log groups từ menu bên trái Chọn /aws/codebuild/fcjBookStorBuildProject Logs\nTrong giao diện của /aws/codebuild/fcjBookStorBuildProject Mở rộng menu Actions Chọn Create metric filter Trong phần Define Pattern, cấu hình các thông tin sau: Filter pattern: mở rộng dropdown và chọn Warning Test pattern: mở rộng và chọn một instance (nên chọn instance mà chúng ta đã tạo processes ở các bước trước) 💡 Pro Tip: Việc kiểm thử pattern trước khi tạo metric filter giúp bạn xác nhận rằng filter sẽ bắt đúng các sự kiện mong muốn, tránh tình trạng thiếu dữ liệu hoặc dữ liệu không chính xác.\nTrong phần Create filter name của Assign metric, nhập PythonAppErrors Trong phần Metric details, cấu hình các thông tin sau: Metric namespace: k6-logs Metric name: /var/log/messages - ERROR Metric value: 1 Default value: 0 Unit: mở rộng dropdown và chọn Count Nhấn Next ⚠️ Warning: Việc đặt namespace và tên metric phù hợp rất quan trọng để dễ dàng tìm kiếm và phân loại metrics trong môi trường có nhiều ứng dụng. Hãy sử dụng quy ước đặt tên nhất quán trong toàn bộ hệ thống của bạn.\nXem lại cấu hình và nhấn Create metric filter Trở lại Metrics \u0026gt; All metrics Tìm kiếm với từ khóa /var/log/messages và ERROR Chọn k6-logs \u0026gt; Metrics with no dimensions ℹ️ Information: Bây giờ chúng ta đã có một metric được tạo từ các log WARNING. Metric này có thể được sử dụng để tạo biểu đồ, dashboards, và cảnh báo khi số lượng lỗi vượt quá ngưỡng cho phép.\n💡 Pro Tip: Bạn có thể tạo nhiều metric filters khác nhau cho cùng một log group để theo dõi các loại sự kiện khác nhau, như ERROR, INFO, hoặc các mẫu tùy chỉnh phù hợp với ứng dụng của bạn.\n🔒 Security Note: Metric filters là công cụ quan trọng để phát hiện các vấn đề bảo mật tiềm ẩn trong hệ thống của bạn. Hãy cân nhắc tạo các filters đặc biệt cho các sự kiện liên quan đến bảo mật như đăng nhập thất bại, thay đổi quyền, hoặc truy cập trái phép.\n"
},
{
	"uri": "https://nits0174.github.io/000058-SessionManager/4-cloudwatch/4.4-alarms/",
	"title": "Thiết Lập cảnh báo CloudWatch Alarms",
	"tags": [],
	"description": "",
	"content": "CloudWatch Alarms ℹ️ Information: Amazon CloudWatch Alarms giúp giám sát metrics hoặc log-derived metrics và tự động kích hoạt hành động khi vượt ngưỡng.\nTrở lại màn hình chính của CloudWatch. Chọn Alarms ở menu bên trái. Chọn All alarms. Ấn chọn Create alarm. Chọn Select metric. Cửa sổ metrics hiện lên, trong Custom namespaces, chọn k6-logs.\nChọn tiếp Metrics with no dimensions, chọn /var/log/messages và ấn chọn Select metric.\nTrong phần Specify metric and conditions, chọn Period là 1 minutes. Trong phần Conditions Threshold type: Static. Điều kiện: Greater than 100. 💡 Pro Tip: Đường nét đứt ngang trên biểu đồ chỉ ra ngưỡng mà Alarm sẽ được kích hoạt. Khi số lượng lỗi vượt quá ngưỡng này, đó là dấu hiệu của sự cố tiềm ẩn trong ứng dụng cần được kiểm tra ngay lập tức.\nSau đó ấn Next để tiếp tục. 5. Giờ thì chúng ta cấu hình thông báo như sau + Alarm state trigger: In alarm. + Chọn Create new topic. + Tên topic là: Error_logs_reach_10. + Email thông báo tới: bạn sẽ nhập email của bạn vào, ở đây mình sẽ nhập của mình. + Ấn Create topic.\nẤn chọn Next. ⚠️ Warning: Đảm bảo rằng địa chỉ email bạn cung cấp là chính xác và được kiểm tra thường xuyên. Nếu không xác nhận đăng ký SNS, bạn sẽ không nhận được thông báo khi alarm kích hoạt.\nỞ bước cuối, nhập tên alarm là PythonApplicationErrorAlarm và ấn chọn Next. 💡 Pro Tip: Đặt tên alarm có ý nghĩa và mô tả rõ mục đích giúp dễ dàng quản lý khi số lượng alarm tăng lên trong môi trường sản xuất thực tế.\nXem lại kết quả và ấn chọn Create alarm. Kết quả\nĐăng nhập vào Gmail hoặc bất kì trang email nào mà bạn dùng. Bạn sẽ thấy một email được gửi tới từ AWS Notification. Ấn chọn Confirm subscription. 🔒 Security Note: Việc xác nhận đăng ký SNS không chỉ kích hoạt thông báo mà còn là một biện pháp bảo mật, đảm bảo rằng chỉ những người dùng được ủy quyền mới nhận được thông báo về trạng thái hệ thống.\nℹ️ Information: Với CloudWatch Alarms đã thiết lập, bạn có thể mở rộng hệ thống giám sát bằng cách tích hợp với các dịch vụ khác như AWS Lambda để tự động khắc phục sự cố, hoặc AWS Systems Manager để thực hiện các hành động tự động trên tài nguyên bị ảnh hưởng.\n"
},
{
	"uri": "https://nits0174.github.io/000058-SessionManager/4-cloudwatch/",
	"title": "Tích Hợp Giám Sát Hiệu Suất với CloudWatch",
	"tags": [],
	"description": "",
	"content": "\nTổng quan ℹ️ Information: Amazon CloudWatch là dịch vụ giám sát và quan sát (observability) toàn diện của AWS, cho phép thu thập, theo dõi và phân tích metrics, logs, và sự kiện của hạ tầng và ứng dụng theo thời gian thực. Trong bối cảnh Performance Automation Testing in CI/CD, CloudWatch đóng vai trò là trung tâm giám sát hiệu năng — giúp tự động thu thập dữ liệu sau mỗi lần kiểm thử tải, phân tích kết quả, phát hiện bất thường và kích hoạt cảnh báo.\nLợi ích chính 💡 Pro Tip: Với Amazon CloudWatch, bạn có thể:\nGiám sát toàn diện các tài nguyên AWS và ứng dụng của bạn Thiết lập cảnh báo thông minh dựa trên ngưỡng tùy chỉnh Tự động hóa phản hồi đối với các sự cố hoạt động Tạo bảng điều khiển trực quan để theo dõi hiệu suất Phân tích logs để khắc phục sự cố nhanh chóng 🔒 Security Note: Việc thiết lập giám sát đúng cách với CloudWatch không chỉ giúp tối ưu hiệu suất mà còn là một phần quan trọng trong chiến lược bảo mật, giúp phát hiện các hoạt động bất thường trong hệ thống của bạn.\nNội dung CloudFormation CloudWatch Metric CloudWatch Logs CloudWatch Alarms CloudWatch Dashboards "
},
{
	"uri": "https://nits0174.github.io/000058-SessionManager/4-cloudwatch/4.5-dashboards/",
	"title": "CloudWatch Dashboards",
	"tags": [],
	"description": "",
	"content": "ℹ️ Information: Amazon CloudWatch Dashboards cho phép tạo bảng điều khiển tùy chỉnh để giám sát metrics, logs, và alarms trong thời gian thực. Trong Performance Automation Testing, dashboard giúp: Theo dõi kết quả test (latency, error rate, throughput) trực quan; xem trạng thái alarm (ví dụ: vượt ngưỡng lỗi hoặc độ trễ); giúp team phát hiện sự cố nhanh hơn so với chỉ xem log hoặc email thông báo.\nCloudWatch Dashboards Thêm alarm đã tạo vào Dashboard: Chọn k6TestingAlarm Mở rộng menu Actions Chọn Add to dashboard Trong hộp thoại Add to dashboard, chọn Create new Cấu hình Dashboard mới: Nhập tên dashboard: CloudWatch-Workshop Nhấn Create Nhấn Add to dashboard 💡 Pro Tip: Đặt tên dashboard có ý nghĩa và phân loại rõ ràng sẽ giúp bạn dễ dàng quản lý khi số lượng dashboards tăng lên trong môi trường thực tế. Cân nhắc sử dụng các tiền tố như “Prod-”, “Dev-”, hoặc tên ứng dụng để phân loại.\nDưới đây là dashboard vừa được tạo:\nℹ️ Information: CloudWatch Dashboards hỗ trợ nhiều loại widget khác nhau như biểu đồ, số liệu đơn, bảng, văn bản và nhiều hơn nữa. Mỗi widget có thể được tùy chỉnh về kích thước, vị trí và hiển thị dữ liệu.\nBạn có thể thực hiện nhiều thao tác tùy chỉnh trên widget này:\n🔒 Security Note: Dashboards có thể được chia sẻ với người dùng khác trong tổ chức của bạn hoặc thậm chí công khai (không yêu cầu đăng nhập AWS). Hãy cẩn thận khi chia sẻ dashboards có chứa thông tin nhạy cảm về cơ sở hạ tầng của bạn.\n⚠️ Warning: CloudWatch Dashboards có giới hạn 500 widgets trên mỗi dashboard và 20.000 metrics trên tất cả các dashboards. Trong môi trường sản xuất lớn, hãy cân nhắc tạo nhiều dashboards chuyên biệt thay vì một dashboard quá lớn và phức tạp.\n"
},
{
	"uri": "https://nits0174.github.io/000058-SessionManager/5-cleanup/",
	"title": "Dọn Dẹp Tài Nguyên",
	"tags": [],
	"description": "",
	"content": "\rSẽ mất một chút thời gian để hoàn thành việc dọn dẹp\nLàm trống S3 bucket.\nMở AWS S3 console. Chọn fcj-book-shop-by-myself. Nhấp vào Empty. Nhập permanently delete. Nhấp vào Empty. Làm tương tự cho các bucket bắt đầu bằng aws-sam-cli-managed-default-, book-image-resize-shop-by-myself và codepipeline-us-east-1-. Xóa pipeline.\nMở AWS CodePipeline console. Chọn pipeline fcjBookStoreFEPipeline. Nhấp vào Delete pipeline. Nhập delete. Nhấp vào Delete. Làm tương tự cho fcjBookStorePipeline. Xóa dự án CodeBuild.\nMở AWS CodeBuild console. Chọn dự án Build fcjBookStoreBuildProject. Nhấp vào Actions, sau đó nhấp vào Delete. Nhập delete. Nhấp vào Delete. Xóa kết nối giữa Gitlab và AWS.\nMở AWS CodeBuild console. Nhấp vào Settings trên menu bên trái và nhấp vào Connections trong dropdown. Chọn fcjBookStoreGitlabConnection. Nhấp vào Delete. Nhập delete. Nhấp vào Delete. Xóa các stack CloudFormation.\nTrên thanh tìm kiếm dịch vụ AWS:\nNhập CloudFormation. Chọn CloudFormation. Trong CloudFormation Console:\nChọn stack đã tạo trong workshop này. Ấn chọn Delete. Trong hộp thoại xác nhận:\nẤn chọn Delete để xác nhận việc xóa stack. 💡 Pro Tip: Quá trình xóa stack có thể mất vài phút tùy thuộc vào số lượng và độ phức tạp của tài nguyên. Bạn có thể theo dõi tiến trình trong tab “Events” của stack.\nChờ đợi quá trình xóa hoàn tất: Stack sẽ hiển thị trạng thái “DELETE_IN_PROGRESS” trong quá trình xóa. Sau khi hoàn tất, stack sẽ biến mất khỏi danh sách. Xóa bucket codepipeline-us-east-1-….\nMở AWS S3 console. Chọn codepipeline-us-east-1-…. Nhấp vào Delete. Nhập codepipeline-us-east-1-.... Nhấp vào Delete bucket. Xóa kho Git. Làm theo tài liệu này: Xóa dự án Gitlab.\nℹ️ Information: Sau khi hoàn thành workshop, việc dọn dẹp tài nguyên là bước quan trọng để tránh phát sinh chi phí không cần thiết.\n⚠️ Warning: Mặc dù các tài nguyên EC2 và các dịch vụ liên quan sẽ bị xóa ngay lập tức, CloudWatch Metrics và Logs sẽ vẫn tồn tại trong hệ thống AWS của bạn tối đa 15 tháng theo chính sách lưu trữ mặc định.\n🔒 Security Note: Việc dọn dẹp tài nguyên không chỉ giúp tiết kiệm chi phí mà còn là biện pháp bảo mật tốt, giảm thiểu bề mặt tấn công tiềm ẩn trong môi trường AWS của bạn.\n"
},
{
	"uri": "https://nits0174.github.io/000058-SessionManager/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nits0174.github.io/000058-SessionManager/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]